---
AWSTemplateFormatVersion: 2010-09-09
Description: |
  Deploy AWS Foundational Security Best Practices Config Rules into accounts

Parameters:
  RuleNamePrefix:
    Description: Prefix of config rule for easier management 
    Type: String 
    Default: ni-ccoe

  IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge:
    Description:
      Maximum number of days a credential cannot be used. The default value
      is 90 days.
    Type: String
    Default: 90

  AcmCertificateExpirationCheckParamDaysToExpiration:
    Description: Number of days to expiration
    Type: String
    Default: 90

  MaxDaysSinceRotation:
    Description: Maximum number of days in which a secret can remain unchanged. The default value is 90 days.
    Type: String
    Default: 90

  AllowedDaysForStoppedEC2Instance:
    Description: >-
      The number of days an EC2 instance can be stopped before it is NON_COMPLIANT. The default number of days is 30.
    Type: String
    Default: 30

  EnableCmkScheduleForDeletion:
    Description: Set true if want to schedule AWS KMS keys for deletion.
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  
  RootAccountHardWareMfaEnabled:
    Description: Set true if want to enable hardware multi-factor authentication (MFA) device to sign in with root user credentials.
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  
  AllowEc2InstanceManagedBySsm:
    Description: Restrict EC2 instances to be managed by SSM
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
 
  MaximumExecutionFrequency:
    Description: Execution frequency period for config rules
    Type: String
    AllowedValues:
      - One_Hour
      - Six_Hours
      - Three_Hours
      - Twelve_Hours
      - TwentyFour_Hours
    Default: TwentyFour_Hours

  BlackListActionForS3Bucket:
    Description: Prohibited actions in S3 bucket policy for a principal in another AWS account
    Type: String 
    Default: s3:DeleteBucketPolicy, s3:PutBucketAcl, s3:PutBucketPolicy, s3:PutEncryptionConfiguration, s3:PutObjectAcl

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: "Basic Configuration"
        Parameters:
          - RuleNamePrefix
          - MaximumExecutionFrequency
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge
          - AcmCertificateExpirationCheckParamDaysToExpiration
          - MaxDaysSinceRotation
          - BlackListActionForS3Bucket
      - Label:
          default: "Optional Config Rules"
        Parameters: 
          - AllowEc2InstanceManagedBySsm
          - EnableCmkScheduleForDeletion
          - RootAccountHardWareMfaEnabled
    ParameterLabels:
      RuleNamePrefix:
        default: "Config rule name prefix"
      MaximumExecutionFrequency:
        default: "Maximum execution frequency"
      IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge:
        default: "Maximum credential age for unused IAM User credential"
      BlackListActionForS3Bucket:
        default: "Black list actions for S3 bucket policy"
      AcmCertificateExpirationCheckParamDaysToExpiration:
        default: "Maximum age for ACM certificate"
      MaxDaysSinceRotation:
        default: "Maximum age for Secrets Manager secrets"  
      AllowEc2InstanceManagedBySsm:
        default: "Enable EC2 Instance managed by SSM?"
      EnableCmkScheduleForDeletion:
        default: "Enable Customer Managed Key schedule for deletion?"
      RootAccountHardWareMfaEnabled:
        default: "Enable hardware MFA to sign in with root credentials?"
      
Conditions:
  EnableCloudFront1:
    !Equals [!Ref AWS::Region, "us-east-1"]

  EnabledKMS3: 
    !Equals [!Ref EnableCmkScheduleForDeletion, true]
  
  EnableEC2InstanceManagedBySsm:
    !Equals [!Ref AllowEc2InstanceManagedBySsm, true]
  
  EnableIam6:
    !Equals [!Ref RootAccountHardWareMfaEnabled, true]

Resources:
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [ACM.1] Imported ACM certificates should be renewed after a specified time period
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  AcmCertificateExpirationCheck:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-acm-certificate-expiration-check
      Description: >-
        Checks if AWS Certificate Manager Certificates in your account are marked for expiration within the specified number of days. 
        Certificates provided by ACM are automatically renewed. ACM does not automatically renew certificates that you import.
      InputParameters:
        daysToExpiration: !Ref AcmCertificateExpirationCheckParamDaysToExpiration
      Scope:
        ComplianceResourceTypes:
          - AWS::ACM::Certificate
      Source:
        Owner: AWS
        SourceIdentifier: ACM_CERTIFICATE_EXPIRATION_CHECK

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [CloudFront.1] CloudFront distributions should have a default root object configured
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  CloudFrontDistributionRootObjectConfigured:
    Condition: EnableCloudFront1
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-cloudfront-default-root-object-configured
      Description: >-
       Checks if an Amazon CloudFront distribution is configured to return a specific object that is the default root object. 
       The rule is NON_COMPLIANT if Amazon CloudFront distribution does not have a default root object configured. 
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDFRONT_DEFAULT_ROOT_OBJECT_CONFIGURED
  
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [CloudTrail.1] CloudTrail should be enabled and configured with at least one multi-Region trail
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  MultiRegionCloudTrailEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-multi-region-cloudtrail-enabled
      Description: >-
       Checks that there is at least one multi-region AWS CloudTrail. 
      Source:
        Owner: AWS
        SourceIdentifier: MULTI_REGION_CLOUD_TRAIL_ENABLED
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [CloudTrail.2] CloudTrail should have encryption at rest enabled
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  CloudTrailEncryptionEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-cloud-trail-encryption-enabled
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Description: >-
        Checks whether AWS CloudTrail is configured to use the server side encryption (SSE) AWS Key Management Service (AWS KMS) customer master key (CMK) encryption.
        The rule is compliant if the KmsKeyId is defined.
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENCRYPTION_ENABLED

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [CodeBuild.1] CodeBuild GitHub or Bitbucket source repository URLs should use OAuth
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  CodeBuildUseOauthOnly:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-codebuild-project-source-repo-url-check
      Description: >-
       Checks whether the GitHub or Bitbucket source repository URL contains either personal access tokens or a user name and password.
       The rule is COMPLIANT with the usage of OAuth to grant authorization for accessing GitHub or Bitbucket repositories.
      Source:
        Owner: AWS
        SourceIdentifier: CODEBUILD_PROJECT_SOURCE_REPO_URL_CHECK

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [CodeBuild.2] CodeBuild project environment variables should not contain clear text credentials
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  CodeBuildNoClearTextCredentials:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-codebuild-project-envvar-awscred-check
      Description: >-
       Checks whether the project contains environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. 
       The rule is NON_COMPLIANT when the project environment variables contains plaintext credentials. 
      Source:
        Owner: AWS
        SourceIdentifier: CODEBUILD_PROJECT_ENVVAR_AWSCRED_CHECK

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [DMS.1] AWS Database Migration Service replication instances should not be public
  # ------------------------------------------------------------------------------------------------------------------------------------------------------- 
  DmsReplicationNotPublic:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-dms-replication-not-public
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Description: >-
        Checks whether AWS DMS replication instances are public. To do this, it examines the value of the PubliclyAccessible field.
      Source:
        Owner: AWS
        SourceIdentifier: DMS_REPLICATION_NOT_PUBLIC
   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [DynamoDB.3] DynamoDB Accelerator (DAX) clusters should be encrypted at rest
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  DaxEncryptionEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-dax-encryption-enabled
      Description: >-
        Checks whether a DAX cluster is encrypted at rest.
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Source:
        Owner: AWS
        SourceIdentifier: DAX_ENCRYPTION_ENABLED
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.1] Amazon EBS snapshots should not be public, determined by the ability to be restorable by anyone
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  EBSSnapshotsNotPublic:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-ebs-snapshot-public-restorable-check
      Description: >-
        Check if your EBS snapshots is public
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK
  
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.2] The VPC default security group should not allow inbound and outbound traffic
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  VPCDefaltSecurityGroupClosed:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-vpc-default-security-group-closed
      Description: >-
        The rule is NON_COMPLIANT if the default security group has one or more inbound or outbound traffic.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: VPC_DEFAULT_SECURITY_GROUP_CLOSED
  
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.3] Attached EBS volumes should be encrypted at rest
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  EC2EncryptionVolume:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-encrypted-volumes
      Description: >-
        Check if your attached EBS volume is encrypted at rest. To pass this check, EBS volumes must be in use and encrypted. 
        If the EBS volume is not attached, then it is not subject to this check.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.4] Stopped EC2 instances should be removed after a specified time period
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  EC2StoppedInstance:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-ec2-stopped-instance
      Description: >-
        Stopped EC2 instances should be removed after a specific time period. By default, is 30 days.
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      InputParameters:
        AllowedDays: !Ref AllowedDaysForStoppedEC2Instance
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_STOPPED_INSTANCE

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.7] EBS default encryption should be enabled
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  Ec2EbsEncryptionByDefault:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-ec2-ebs-encryption-by-default
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Description: >-
        Check that Amazon Elastic Block Store (EBS) encryption is enabled by default. 
        The rule is NON_COMPLIANT if the encryption is not enabled.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_EBS_ENCRYPTION_BY_DEFAULT

   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.9] EC2 instances should not have a public IP address
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  EC2InstanceNoPublicIp:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-ec2-instance-no-public-ip
      Description: >-
        This control checks whether EC2 instances have a public IP address. The control fails if the publicIp field is present in the EC2 instance configuration item. 
        This control applies to IPv4 addresses only.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP

   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.15] EC2 subnets should not automatically assign public IP addresses
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  AutoAssignIpAddressDisabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-subnet-auto-assign-public-ip-disabled
      Description: EC2 subnets should not automatically assign public IP address
      Source:
        Owner: AWS
        SourceIdentifier: SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EFS.1] Amazon EFS should be configured to encrypt file data at rest using AWS KMS
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  EFSEncryptionCheck:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-efs-encrypted-check
      Description: Check if your EFS is configured to encrypt file data at rest using AWS KMS.
      Source:
        Owner: AWS
        SourceIdentifier: EFS_ENCRYPTED_CHECK
   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [ELB.3] Classic Load Balancer listeners should be configured with HTTPS or TLS termination
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  ELBTlsHttpsListenerOnly:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-elb-tls-https-listeners-only
      Description: Check if Elastic Load Balancer is configured with HTTPS or TLS termination.
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ELB_TLS_HTTPS_LISTENERS_ONLY

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [ELB.4] Application load balancers should be configured to drop HTTP headers
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  ALBDropHttpHeader:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-alb-http-drop-invalid-header-enabled
      Description: Check if Application Load Balancer is configured to drop HTTP headers
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancing::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ALB_HTTP_DROP_INVALID_HEADER_ENABLED
   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [ELBv2.1] Application Load Balancer should be configured to redirect all HTTP requests to HTTPS
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  ALBHttpRedirectToHttps:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-alb-http-to-https-redirection-check
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Description: Check whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers
      Source:
        Owner: AWS
        SourceIdentifier: ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EMR.1] Amazon EMR cluster master nodes should not have public IP addresses
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  EmrNoPublicIpAddresses:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-emr-master-no-public-ip
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Description: >-
        Checks if Amazon Elastic MapReduce (EMR) clusters' master nodes have public IPs. 
        The rule is NON_COMPLIANT if the master node has a public IP.
      Source:
        Owner: AWS
        SourceIdentifier: EMR_MASTER_NO_PUBLIC_IP
  
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [ES.2] Amazon Elasticsearch Service domains should be in a VPC
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  ElasticSearchInVpcOnly:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-elasticsearch-in-vpc-only
      Description: >-
        Checks if Amazon Elasticsearch Service (Amazon ES) domains are in Amazon Virtual Private Cloud (Amazon VPC). 
        The rule is NON_COMPLIANT if the Amazon ES domain endpoint is public.
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_IN_VPC_ONLY
   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [IAM.1] IAM policies should not allow full "*" administrative privileges
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  IAMPolicyNoAdminAccessStatement:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-iam-policy-no-statements-with-admin-access
      Description: >-
        Checks the IAM policies that you create for Allow statements that grant permissions to all actions on all resources. 
        The rule is NON_COMPLIANT if any customer managed policy statement includes "Effect": "Allow" with "Action": "*" over "Resource": "*".
      Source:
        Owner: AWS
        SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [IAM.4] IAM root user access key should not exist
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  IamRootAccessKeyCheck:
    Type: AWS::Config::ConfigRule 
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-iam-root-access-key-check
      Description: >-
        Checks whether the root user access key is present.
        The root account is the most privileged user in an AWS account. AWS access keys provide programmatic access to a given account.
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Source:
        Owner: AWS
        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [IAM.6] Hardware MFA should be enabled for the root user
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RootAccountHardwareMfaEnabled:
    Condition: EnableIam6
    Type: AWS::Config::ConfigRule 
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-root-account-hardware-mfa-enabled
      Description: >-
        Checks whether your AWS account is enabled to use multi-factor authentication (MFA) hardware device to sign in with root credentials.
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [IAM.8] Unused IAM user credentials should be removed
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  IAMUserUnusedCredentialsCheck:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-iam-user-unused-credentials-check
      Description: >-
        Checks whether your AWS Identity and Access Management (IAM) users have passwords or active access keys that have not been used within the specified number of days you provided.
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      InputParameters:
        maxCredentialUsageAge:
          Ref: IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [KMS.1] IAM customer managed policies should not allow decryption actions on all KMS keys
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  IamCustomerPolicyBlockKMSDecryptionAction:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-iam_customer_policy_blocked_kms_actions
      Description: >-
        Checks whether the default version of IAM customer managed policies allow principals to use the AWS KMS decryption actions on all resources.
      InputParameters:
        blockedActionsPatterns: "kms:*, kms:Decrypt, kms:ReEncrypt*."
      Source:
        Owner: AWS
        SourceIdentifier: IAM_CUSTOMER_POLICY_BLOCKED_KMS_ACTIONS
  
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [KMS.2] IAM principals should not have IAM inline policies that allow decryption actions on all KMS keys
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  IamInlinePolicyBlockKMSDecryptionAction:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-iam-inline-policy-blocked-kms-actions
      Description: >-
        Checks whether the inline policies that are embedded in your IAM identities (role, user, or group) allow the AWS KMS decryption actions on all KMS keys.
      InputParameters:
        blockedActionsPatterns: "kms:*, kms:Decrypt, kms:ReEncrypt*."
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Policy
      Source:
        Owner: AWS
        SourceIdentifier: IAM_INLINE_POLICY_BLOCKED_KMS_ACTIONS

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [KMS.3] AWS KMS keys should not be unintentionally deleted
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  KmsCMKNotScheduledForDeletion:
    Condition: EnabledKMS3
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-kms-cmk-not-scheduled-for-deletion
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      Description: >-
        This control checks whether AWS KMS customer managed keys (CMK) are scheduled for deletion. The control fails if a CMK is scheduled for deletion.
      Scope:
        ComplianceResourceTypes:
          - AWS::KMS::Key
      Source:
        Owner: AWS
        SourceIdentifier: KMS_CMK_NOT_SCHEDULED_FOR_DELETION

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [Lambda.1] Lambda function policies should prohibit public access
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  LambdaFunctionPublicAccessProhibited:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-lambda-function-public-access-prohibited
      Description: >-
        Checks whether the Lambda function resource-based policy prohibits public access outside of your account.
        The Lambda function should not be publicly accessible, as this may allow unintended access to your code stored in the function.
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [RDS.1] RDS snapshots should be private
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RdsSnapshotsPublicProhibited:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-rds-snapshots-public-prohibited
      Description: >-
        Checks whether Amazon RDS snapshots are public. An RDS snapshot must not be public unless intended.
      Source:
        Owner: AWS
        SourceIdentifier: RDS_SNAPSHOTS_PUBLIC_PROHIBITED
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [RDS.2] RDS DB instances should prohibit public access, determined by the PubliclyAccessible configuration
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RdsInstancePublicAccessCheck:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-rds-instance-public-access-check
      Description: >-
        Checks whether Amazon RDS instances are publicly accessible by evaluating the PubliclyAccessible field in the instance configuration item.
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [RDS.3] RDS DB instances should have encryption at rest enabled
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RdsStorageEncrypted:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-rds-storage-encrypted
      Description: >-
        Checks whether storage encryption is enabled for your Amazon RDS DB instances.
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_STORAGE_ENCRYPTED
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [RDS.4] RDS cluster snapshots and database snapshots should be encrypted at rest
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RdsSnapshotEncrypted:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-rds-snapshots-encrypted
      Description: >-
        Checks whether RDS DB snapshots are encrypted.
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBSnapshot
          - AWS::RDS::DBClusterSnapshot
      Source:
        Owner: AWS
        SourceIdentifier: RDS_SNAPSHOT_ENCRYPTED

   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [Redshift.1] Amazon Redshift clusters should prohibit public access
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RedshiftClusterPublicAccessCheck:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-redshift-cluster-public-access-check
      Description: >-
        Checks whether Amazon Redshift clusters are publicly accessible. It evaluates the PubliclyAccessible field in the cluster configuration item.
      Scope:
        ComplianceResourceTypes:
          - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [Redshift.2] Connections to Amazon Redshift clusters should be encrypted in transit
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RedshiftRequireTlsSsl:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-redshift-require-tls-ssl
      Description: >-
        Checks whether connections to Amazon Redshift clusters are required to use encryption in transit. The check fails if the Amazon Redshift cluster parameter require_SSL is not set to 1.
      Scope:
        ComplianceResourceTypes:
          - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_REQUIRE_TLS_SSL
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [Redshift.7] Amazon Redshift clusters should use enhanced VPC routing
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  RedshiftEnhancedVPCRoutingEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-redshift-enhanced-vpc-routing-enabled
      Description: >-
        Checks if Amazon Redshift cluster has 'enhancedVpcRouting' enabled. 
        The rule is NON_COMPLIANT if 'enhancedVpcRouting' is not enabled or if the configuration.enhancedVpcRouting field is 'false'.
      Scope:
        ComplianceResourceTypes:
          - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_ENHANCED_VPC_ROUTING_ENABLED

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [S3.1] S3 Block Public Access setting should be enabled
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  S3BlockPublicAccessEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-s3-account-level-public-access-blocks
      Description: >-
        Check if your S3 Bucket has enabled block public access
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS
   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [S3.2] S3 buckets should prohibit public read access
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  S3BucketPublicReadProhibited:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-s3-bucket-public-read-prohibited
      Description: >-
        Checks that your Amazon S3 buckets do not allow public read access.
        The rule checks the Block Public Access settings, the bucket policy, and the
        bucket access control list (ACL).
      Scope:
        ComplianceResourceTypes:
          - "AWS::S3::Bucket"
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [S3.3] S3 buckets should prohibit public write access
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  S3BucketPublicWriteProhibited:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-s3-bucket-public-write-prohibited
      Description: >-
        Checks that your Amazon S3 buckets do not allow public write access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).
      Scope:
        ComplianceResourceTypes:
          - "AWS::S3::Bucket"
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED
   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [S3.4] S3 buckets should have server-side encryption enabled
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  S3BucketServerSideEncryptionEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-s3-bucket-server-side-encryption-enabled
      Description: Checks that your Amazon S3 bucket either has S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server side encryption.
      Scope:
        ComplianceResourceTypes:
          - "AWS::S3::Bucket"
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED
   
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [S3.5] S3 buckets should require requests to use Secure Socket Layer
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  S3BucketSSLRequestsOnly:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-s3-bucket-ssl-requests-only
      Description: >-
        Checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL).
      Scope:
        ComplianceResourceTypes:
          - "AWS::S3::Bucket"
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SSL_REQUESTS_ONLY

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [S3.6] Amazon S3 permissions granted to other AWS accounts in bucket policies should be restricted
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  S3BucketBlacklistedActions:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-s3-bucket-blacklisted-actions-prohibited
      Description: >-
        Checks if the S3 bucket policy does not allow blacklisted bucket-level and object-level actions on resources in the bucket for principals from other AWS accounts.
      InputParameters:
        blacklistedActionPattern: !Ref BlackListActionForS3Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_BLACKLISTED_ACTIONS_PROHIBITED

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [SageMaker.1] SageMaker notebook instances should not have direct internet access
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  SageMakerNotebookNoDirectInternetAccess:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-sagemaker-notebook-no-direct-internet-access
      Description: >-
        Checks whether direct internet access is disabled for an Amazon SageMaker notebook instance. 
        The rule is NON_COMPLIANT if Amazon SageMaker notebook instances are internet-enabled
      Source:
        Owner: AWS
        SourceIdentifier: SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS
  
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [SecretsManager.1] Secrets Manager secrets should have automatic rotation enabled
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  SecretsManagerRotationEnabledCheck:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-secretsmanager-rotation-enabled-check
      Description: >-
        Checks whether a secret stored in AWS Secrets Manager is configured with automatic rotation.
      Scope:
        ComplianceResourceTypes:
          - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_ROTATION_ENABLED_CHECK

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [SecretsManager.2] Secrets Manager secrets configured with automatic rotation should rotate successfully
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  SecretsManagerScheduledRotationSuccessCheck:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-secretsmanager-scheduled-rotation-success-check
      Description: >-
        Checks whether an AWS Secrets Manager secret rotated successfully based on the rotation schedule. The control fails if RotationOccurringAsScheduled is false. 
        The control does not evaluate secrets that do not have rotation configured.
      Scope:
        ComplianceResourceTypes:
          - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK
 
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [SecretsManager.4] Secrets Manager secrets should be rotated within a specified number of days
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  SecretsManagerSecretPeriodicRotation:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-secretsmanager_secret_periodic_rotation
      Description: >-
        Checks whether your secrets have been rotated at least once within 90 days. This control fails if the secrets have not been rotated for at least 90 days.
      MaximumExecutionFrequency: !Ref MaximumExecutionFrequency
      InputParameters:
        maxDaysSinceRotation: !Ref MaxDaysSinceRotation
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SECRET_PERIODIC_ROTATION

  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [SSM.1] EC2 instances should be managed by AWS Systems Manager
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  Ec2InstanceManagedBySsm:
    Condition: EnableEC2InstanceManagedBySsm
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: !Sub ${RuleNamePrefix}-ec2-instance-managed-by-ssm
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
          - AWS::SSM::ManagedInstanceInventory
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_MANAGED_BY_SSM